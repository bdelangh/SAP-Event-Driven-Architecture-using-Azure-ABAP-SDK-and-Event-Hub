method BI_EVENT_HANDLER_STATIC~ON_EVENT.

    "InterfaceId to be used by ABAP SDK
    constants: gc_interface_id type zinterface_id value 'AZEHUBBDL',
               gc_message_class type symsgid value 'ZAZEH',
               gc_appl_log_obj type balobj_d value 'ZBD_AZEH',
               gc_appl_log_subobj type balsubobj value 'ZBUPA'.

    TYPES: BEGIN OF lty_message,
         busobj     TYPE sbo_bo_type,
         busobjname TYPE SBEH_BOTYP_TEXT,
         event      TYPE SIBFEVENT,
         date       type dats,
         time       type tims,
         objkey     TYPE SIBFBORIID,
         firstname  TYPE bu_namep_f,
         lastname   type bu_namep_l,
       END OF lty_message.

    data: lv_busobj_type        type sbo_bo_type,
          lv_busobj_type_name   type SBEH_BOTYP_TEXT,
          lv_buspartner_id      type BU_PARTNER,
          lv_centraldata_person type BAPIBUS1006_CENTRAL_PERSON,
          lv_firstname          type bu_namep_f,
          lv_lastname           type bu_namep_l.

    data: it_headers            TYPE tihttpnvp,
          wa_headers            TYPE LINE OF tihttpnvp,
          lv_error_string       TYPE string,
          lv_response           TYPE string,
          cx_interface          TYPE REF TO zcx_interace_config_missing,
          cx_http               TYPE REF TO zcx_http_client_failed,
          cx_adf_service        TYPE REF TO zcx_adf_service,
          oref_eventhub         TYPE REF TO zcl_adf_service_eventhub,
          oref                  TYPE REF TO zcl_adf_service,
          filter                type zbusinessid,
          lv_http_status        TYPE i, "HTTP Status code
          lo_json               TYPE REF TO cl_trex_json_serializer,
          lv_json_string        TYPE string,
          lv_json_xstring       TYPE xstring,
          lv_message            TYPE lty_message.

    data: lt_msg                TYPE bal_tt_msg,
          ls_msg                TYPE bal_s_msg.

    "select the business object type
    SELECT SINGLE bo_type INTO lv_busobj_type
      FROM sbo_i_bodef
      WHERE object_name = sender-typeid
      AND   object_type_category = sender-catid.
    IF sy-subrc = 0.
      SELECT SINGLE bo_text INTO lv_busobj_type_name
        FROM sbo_i_botypet
        WHERE bo_type  = lv_busobj_type
        AND   bo_textlan = sy-langu.
    ENDIF.

    lv_buspartner_id = sender-instid.

    "Get the BusinessPartner Details
    call function 'BAPI_BUPA_CENTRAL_GETDETAIL'
      exporting
         businesspartner = lv_buspartner_id
      importing
         centraldataperson = lv_centraldata_person.

    "Create the message
    lv_message-busobj     = sender-typeid.
    lv_message-busobjname = lv_busobj_type_name.
    lv_message-event      = event.
    lv_message-objkey     = lv_buspartner_id.
    lv_message-date       = sy-datlo.
    lv_message-time       = sy-timlo.
    lv_message-firstname  = lv_centraldata_person-firstname.
    lv_message-lastname   = lv_centraldata_person-lastname.

    TRY.
      "Calling Factory method to instantiate eventhub client

      oref = zcl_adf_service_factory=>create( iv_interface_id        = gc_interface_id
                                              iv_business_identifier = filter ).
      oref_eventhub ?= oref. "Type Cast to EventHub Object?

      "Setting Expiry time
      CALL METHOD oref_eventhub->add_expiry_time
        EXPORTING
          iv_expiry_hour = 0
          iv_expiry_min  = 15
          iv_expiry_sec  = 0.

      "Convert to JSON
      CREATE OBJECT lo_json
        EXPORTING
          data = lv_message.

      lo_json->serialize( ).
      lv_json_string  = lo_json->get_data( ).


      "Convert input string data to Xstring format
      CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
        EXPORTING
          text   = lv_json_string
        IMPORTING
          buffer = lv_json_xstring
        EXCEPTIONS
          failed = 1
          OTHERS = 2.
      IF sy-subrc <> 0.
      ENDIF.

      " Sending Converted SAP data to Azure Eventhub
      CALL METHOD oref_eventhub->send
        EXPORTING
          request        = lv_json_xstring  "Input XSTRING of SAP Business Event data
          it_headers     = it_headers  "Header attributes
        IMPORTING
          response       = lv_response       "Response from EventHub
          ev_http_status = lv_http_status.   "Status

    CATCH zcx_interace_config_missing INTO cx_interface.
      lv_error_string = cx_interface->get_text( ).
      ls_msg-msgty  = 'E'.
      ls_msg-msgid  = gc_message_class.
      ls_msg-msgno  = '001'.
      ls_msg-msgv1  = sender-typeid.
      ls_msg-msgv2  = lv_buspartner_id.
      ls_msg-msgv3  = lv_error_string.
      APPEND ls_msg TO lt_msg.
      CALL METHOD cl_beh_application_log=>create
         EXPORTING
           i_msg       = lt_msg
           i_object    = gc_appl_log_obj
           i_subobject = gc_appl_log_subobj.

    CATCH zcx_http_client_failed INTO cx_http .
      lv_error_string = cx_http->get_text( ).
      ls_msg-msgty  = 'E'.
      ls_msg-msgid  = gc_message_class.
      ls_msg-msgno  = '001'.
      ls_msg-msgv1  = sender-typeid.
      ls_msg-msgv2  = lv_buspartner_id.
      ls_msg-msgv3  = lv_error_string.
      APPEND ls_msg TO lt_msg.
      CALL METHOD cl_beh_application_log=>create
         EXPORTING
           i_msg       = lt_msg
           i_object    = gc_appl_log_obj
           i_subobject = gc_appl_log_subobj.

    CATCH zcx_adf_service INTO cx_adf_service.
      lv_error_string = cx_adf_service->get_text( ).
      lv_error_string = cx_interface->get_text( ).
      ls_msg-msgty  = 'E'.
      ls_msg-msgid  = gc_message_class.
      ls_msg-msgno  = '001'.
      ls_msg-msgv1  = sender-typeid.
      ls_msg-msgv2  = lv_buspartner_id.
      ls_msg-msgv3  = lv_error_string.
      APPEND ls_msg TO lt_msg.
      CALL METHOD cl_beh_application_log=>create
         EXPORTING
           i_msg       = lt_msg
           i_object    = gc_appl_log_obj
           i_subobject = gc_appl_log_subobj.

    ENDTRY.

  endmethod.